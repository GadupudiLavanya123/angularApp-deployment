name: IIS server to Angular Deployment

on:
  push:
    branches:
      - dev  # Trigger deployment when changes are pushed to the 'dev' branch

jobs:
  deploy:
    runs-on: windows-latest  # Using a Windows runner for IIS deployment

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16  # Ensure this matches your project's Node.js version

      # Step 3: Install Dependencies and Build Angular App
      - name: Install Dependencies
        run: npm install

      - name: Build Angular App
        run: npm run build -- --configuration=production

      # Step 4: Copy files to IIS server and configure IIS site
      - name: Deploy to IIS server
        shell: pwsh
        run: |
          $errorActionPreference = "Stop"

          # Set IIS server details
          $server = "192.168.0.103"  # Replace with your IIS server's IP address
          $username = "Lavanya Gadupudi"  # Replace with your IIS server's username
          $password = "${{ secrets.IIS_PASSWORD }}"  # Store IIS password securely in GitHub secrets

          # Paths for source and destination
          $sourceDir = "${{ github.workspace }}\dist\my-angular9-app"  # Local build directory
          $destinationDir = "C:\inetpub\wwwroot\my-angular9-app"  # IIS physical directory path

          # Create a secure credential object
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

          # Use HTTP transport instead of HTTPS
          Invoke-Command -ComputerName $server -Credential $credential -Authentication Negotiate -ScriptBlock {
            param($sourceDir, $destinationDir)

            # Ensure the destination directory exists
            if (-not (Test-Path -Path $destinationDir)) {
              New-Item -ItemType Directory -Path $destinationDir -Force
            }

            # Copy files from source to destination
            Copy-Item -Path "$sourceDir\*" -Destination $destinationDir -Recurse -Force
          } -ArgumentList $sourceDir, $destinationDir
          
      # Step 5: Restart IIS
      - name: Restart IIS
        shell: pwsh
        run: |
          $errorActionPreference = "Stop"

          # Set IIS server details
          $server = "192.168.0.103"  # Replace with your IIS server's IP address
          $username = "Lavanya Gadupudi"  # Replace with your IIS server's username
          $password = "${{ secrets.IIS_PASSWORD }}"  # Store IIS password securely in GitHub secrets

          # Create a secure credential object
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

          # Restart IIS service on the server
          Invoke-Command -ComputerName $server -Credential $credential -Authentication Negotiate -ScriptBlock {
            Restart-Service -Name "W3SVC"  # Restart IIS web service
          } 
