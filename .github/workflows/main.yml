name: Deploy Angular App to IIS

on:
  push:
    branches:
      - dev  # Trigger deployment when changes are pushed to 'dev' branch

jobs:
  deploy:
    runs-on: windows-latest  # Use Windows runner for IIS deployment

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install dependencies and build Angular app
      - name: Install Dependencies
        run: npm install

      - name: Build Angular App
        run: npm run build -- --configuration=production

      # Step 4: Deploy files to IIS server
      - name: Deploy to IIS Server
        shell: pwsh
        run: |
          $errorActionPreference = "Stop"

          # Set server details
          $server = "192.168.0.103"
          $username = "Administrator" # Replace with your server username
          $password = "${{ secrets.IIS_PASSWORD }}"  # Set password as a secret in GitHub

          # Paths for deployment
          $sourceDir = "${{ github.workspace }}\dist\my-angular9-app"  # Adjust to your build output folder
          $destinationDir = "C:\inetpub\wwwroot\my-angular9-app"

          # Add server to TrustedHosts
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value $server -Force

          # Create credentials
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

          # Ensure remote destination exists and copy files
          Invoke-Command -ComputerName $server -Credential $credential -Authentication Basic -ScriptBlock {
            param($sourceDir, $destinationDir)

            if (-not (Test-Path -Path $destinationDir)) {
              New-Item -ItemType Directory -Path $destinationDir -Force
            }
            Copy-Item -Path "$using:sourceDir\*" -Destination $destinationDir -Recurse -Force
          }

      # Step 5: Restart IIS to apply changes
      - name: Restart IIS
        shell: pwsh
        run: |
          $errorActionPreference = "Stop"

          # Set server details
          $server = "192.168.0.103"
          $username = "Administrator" # Replace with your server username
          $password = "${{ secrets.IIS_PASSWORD }}"  # Set password as a secret in GitHub

          # Create credentials
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

          # Restart IIS service
          Invoke-Command -ComputerName $server -Credential $credential -Authentication Basic -ScriptBlock {
            Restart-Service -Name "W3SVC"
          }
