name: Deploy Angular App to IIS

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      # Step 3: Install dependencies and build Angular app
      - name: Install Dependencies
        run: npm install

      - name: Build Angular App
        run: npm run build -- --configuration=production

      # Step 4: Transfer Files to IIS Server
      - name: Copy Files to IIS Server
        run: |
          $env:SERVER_IP = "192.168.0.103"
          $env:USERNAME = "lavig" # Replace with your server username
          $env:PASSWORD = "${{ secrets.IIS_PASSWORD }}" # Store password securely in GitHub Secrets
          $env:SOURCE_DIR = "${{ github.workspace }}\\dist\\my-angular9-app"
          $env:DESTINATION_DIR = "C:\\inetpub\\wwwroot\\my-angular9-app"

          # Use PSCP (part of PuTTY) for secure file transfer
          # Download PuTTY tools if needed
          Invoke-WebRequest -Uri "https://the.earth.li/~sgtatham/putty/latest/w64/pscp.exe" -OutFile "pscp.exe"

          # Use pscp to copy files securely
          .\pscp.exe -r -pw $env:PASSWORD $env:SOURCE_DIR/* $env:USERNAME@$env:SERVER_IP:$env:DESTINATION_DIR

      # Step 5: Restart IIS on the remote server
      - name: Restart IIS on IIS Server
        shell: pwsh
        run: |
          $errorActionPreference = "Stop"

          # Set server details
          $server = "192.168.0.103"
          $username = "Administrator"  # Replace with your server username
          $password = "${{ secrets.IIS_PASSWORD }}"  # Store password securely in GitHub Secrets

          # Create a secure credential object
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $securePassword)

          # Restart IIS service on the remote server
          Invoke-Command -ComputerName $server -Credential $credential -ScriptBlock {
            Restart-Service -Name "W3SVC"
          }
